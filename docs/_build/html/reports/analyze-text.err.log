Traceback (most recent call last):
  File "/opt/homebrew/Caskroom/miniconda/base/envs/llm-env/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/homebrew/Caskroom/miniconda/base/envs/llm-env/lib/python3.11/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Caskroom/miniconda/base/envs/llm-env/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 173, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Caskroom/miniconda/base/envs/llm-env/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/homebrew/Caskroom/miniconda/base/envs/llm-env/lib/python3.11/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/homebrew/Caskroom/miniconda/base/envs/llm-env/lib/python3.11/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/homebrew/Caskroom/miniconda/base/envs/llm-env/lib/python3.11/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd

df_gold = pd.read_parquet('./data/arxiv_metadata.parquet')
df_extracted = pd.read_parquet('./data/extracted_data.parquet')

true_positives = []
false_positives = []
false_negatives = []

for id in df_extracted['id']:
    gold_authors = list(df_gold[df_gold['id'] == id]['authors'])[0]
    gold_authors = {a.strip() for a in gold_authors.split(',')}

    predicted = df_extracted[df_extracted['id'] == id]
    predicted_authors = set(predicted['author'])
    
    for author in predicted_authors:
        if author in gold_authors:
            true_positives.append((id, author))
        else:
            false_positives.append((id, author))
    
    for author in gold_authors:
        if author not in predicted_authors:
            false_negatives.append((id, author))


# round precision to 2 decimal places
precision = round(len(true_positives) / (len(true_positives) + len(false_positives)), 2)

# round recall to 2 decimal places
recall = round(len(true_positives) / (len(true_positives) + len(false_negatives)), 2)

print(f"true_positives count: {len(true_positives)}")
print(f"false_positives count: {len(false_positives)}")
print(f"false_negatives count: {len(false_negatives)}")
print("precision:", precision)
print("recall:", recall)
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
Cell [0;32mIn[8], line 3[0m
[1;32m      1[0m [38;5;28;01mimport[39;00m [38;5;21;01mpandas[39;00m [38;5;28;01mas[39;00m [38;5;21;01mpd[39;00m
[0;32m----> 3[0m df_gold [38;5;241m=[39m [43mpd[49m[38;5;241;43m.[39;49m[43mread_parquet[49m[43m([49m[38;5;124;43m'[39;49m[38;5;124;43m./data/arxiv_metadata.parquet[39;49m[38;5;124;43m'[39;49m[43m)[49m
[1;32m      4[0m df_extracted [38;5;241m=[39m pd[38;5;241m.[39mread_parquet([38;5;124m'[39m[38;5;124m./data/extracted_data.parquet[39m[38;5;124m'[39m)
[1;32m      6[0m true_positives [38;5;241m=[39m []

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/llm-env/lib/python3.11/site-packages/pandas/io/parquet.py:654[0m, in [0;36mread_parquet[0;34m(path, engine, columns, storage_options, use_nullable_dtypes, dtype_backend, filesystem, filters, **kwargs)[0m
[1;32m    501[0m [38;5;129m@doc[39m(storage_options[38;5;241m=[39m_shared_docs[[38;5;124m"[39m[38;5;124mstorage_options[39m[38;5;124m"[39m])
[1;32m    502[0m [38;5;28;01mdef[39;00m [38;5;21mread_parquet[39m(
[1;32m    503[0m     path: FilePath [38;5;241m|[39m ReadBuffer[[38;5;28mbytes[39m],
[0;32m   (...)[0m
[1;32m    511[0m     [38;5;241m*[39m[38;5;241m*[39mkwargs,
[1;32m    512[0m ) [38;5;241m-[39m[38;5;241m>[39m DataFrame:
[1;32m    513[0m [38;5;250m    [39m[38;5;124;03m"""[39;00m
[1;32m    514[0m [38;5;124;03m    Load a parquet object from the file path, returning a DataFrame.[39;00m
[1;32m    515[0m 
[0;32m   (...)[0m
[1;32m    651[0m [38;5;124;03m    1    4    9[39;00m
[1;32m    652[0m [38;5;124;03m    """[39;00m
[0;32m--> 654[0m     impl [38;5;241m=[39m [43mget_engine[49m[43m([49m[43mengine[49m[43m)[49m
[1;32m    656[0m     [38;5;28;01mif[39;00m use_nullable_dtypes [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m lib[38;5;241m.[39mno_default:
[1;32m    657[0m         msg [38;5;241m=[39m (
[1;32m    658[0m             [38;5;124m"[39m[38;5;124mThe argument [39m[38;5;124m'[39m[38;5;124muse_nullable_dtypes[39m[38;5;124m'[39m[38;5;124m is deprecated and will be removed [39m[38;5;124m"[39m
[1;32m    659[0m             [38;5;124m"[39m[38;5;124min a future version.[39m[38;5;124m"[39m
[1;32m    660[0m         )

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/llm-env/lib/python3.11/site-packages/pandas/io/parquet.py:66[0m, in [0;36mget_engine[0;34m(engine)[0m
[1;32m     63[0m         [38;5;28;01mexcept[39;00m [38;5;167;01mImportError[39;00m [38;5;28;01mas[39;00m err:
[1;32m     64[0m             error_msgs [38;5;241m+[39m[38;5;241m=[39m [38;5;124m"[39m[38;5;130;01m\n[39;00m[38;5;124m - [39m[38;5;124m"[39m [38;5;241m+[39m [38;5;28mstr[39m(err)
[0;32m---> 66[0m     [38;5;28;01mraise[39;00m [38;5;167;01mImportError[39;00m(
[1;32m     67[0m         [38;5;124m"[39m[38;5;124mUnable to find a usable engine; [39m[38;5;124m"[39m
[1;32m     68[0m         [38;5;124m"[39m[38;5;124mtried using: [39m[38;5;124m'[39m[38;5;124mpyarrow[39m[38;5;124m'[39m[38;5;124m, [39m[38;5;124m'[39m[38;5;124mfastparquet[39m[38;5;124m'[39m[38;5;124m.[39m[38;5;130;01m\n[39;00m[38;5;124m"[39m
[1;32m     69[0m         [38;5;124m"[39m[38;5;124mA suitable version of [39m[38;5;124m"[39m
[1;32m     70[0m         [38;5;124m"[39m[38;5;124mpyarrow or fastparquet is required for parquet [39m[38;5;124m"[39m
[1;32m     71[0m         [38;5;124m"[39m[38;5;124msupport.[39m[38;5;130;01m\n[39;00m[38;5;124m"[39m
[1;32m     72[0m         [38;5;124m"[39m[38;5;124mTrying to import the above resulted in these errors:[39m[38;5;124m"[39m
[1;32m     73[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00merror_msgs[38;5;132;01m}[39;00m[38;5;124m"[39m
[1;32m     74[0m     )
[1;32m     76[0m [38;5;28;01mif[39;00m engine [38;5;241m==[39m [38;5;124m"[39m[38;5;124mpyarrow[39m[38;5;124m"[39m:
[1;32m     77[0m     [38;5;28;01mreturn[39;00m PyArrowImpl()

[0;31mImportError[0m: Unable to find a usable engine; tried using: 'pyarrow', 'fastparquet'.
A suitable version of pyarrow or fastparquet is required for parquet support.
Trying to import the above resulted in these errors:
 - Missing optional dependency 'pyarrow'. pyarrow is required for parquet support. Use pip or conda to install pyarrow.
 - Missing optional dependency 'fastparquet'. fastparquet is required for parquet support. Use pip or conda to install fastparquet.

